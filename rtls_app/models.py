from django.db import models

from django.core.validators import MinLengthValidator

import datetime


class Temp(models.Model):
    # id = models.AutoField(primary_key=True)
    ### ID AutoGenerated
    enum_id = models.CharField(unique=True, max_length=30, blank=False)
    description = models.CharField(max_length=255, blank=True)

    def __str__(self):
        return self.enum_id


# Create your models here.

class EnumerationType(models.Model):
    ### ID AutoGenerated
    enum_type_id = models.CharField(unique=True, max_length=30, blank=False)
    description = models.CharField(max_length=255, blank=True)

    def __str__(self):
        return self.enum_type_id


class Enumeration(models.Model):
    # id = models.AutoField(primary_key=True)
    ### ID AutoGenerated
    enum_id = models.CharField(unique=True, max_length=30, blank=False)
    description = models.CharField(max_length=255, blank=True)

    # Foreign Keys
    parent_enum_id = models.ForeignKey('self', on_delete=models.CASCADE, blank=True, null=True)
    enum_type_id = models.ForeignKey(EnumerationType, on_delete=models.CASCADE, blank=True)

    def __str__(self):
        return self.enum_id


class Unit(models.Model):
    ### ID AutoGenerated TODO: Check the DataType for unit_id (String/Integer)(primary_key/unique)
    # unit_id = models.BigAutoField(primary_key=True)
    unit_id = models.CharField(max_length=25, unique=True, blank=False, )
    name = models.CharField(max_length=20, blank=True, null=True)

    # Foreign Keys
    parent_id = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True)

    def __str__(self):
        return self.name


class Asset(models.Model):
    ### ID AutoGenerated TODO: Check the DataType for asset_id (String/Integer)(primary_key/unique)
    asset_id = models.AutoField(primary_key=True)
    # asset_id = models.CharField(max_length=20 , unique=True, blank=False,)

    # Foreign Keys
    type_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, null=False)
    unit_id = models.ForeignKey(Unit, on_delete=models.CASCADE, null=True, )

    def __str__(self):
        return str(self.asset_id)


class Building(models.Model):
    ### ID AutoGenerated TODO: Check the DataType for building_id (String/Integer)(primary_key/unique)
    building_id = models.BigAutoField(primary_key=True)
    # building_id = models.CharField(max_length=20 , unique=True, blank=False,)
    name = models.CharField(max_length=35)
    latitude = models.DecimalField(max_digits=9, decimal_places=6)
    longitude = models.DecimalField(max_digits=9, decimal_places=6)

    # Foreign Keys
    type_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, related_name='building_type_enum')
    status_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, related_name='building_status_enum',
                                       null=True)

    def __str__(self):
        return str(self.building_id)


class Floor(models.Model):
    ### ID AutoGenerated TODO: Check the DataType for floor_id (String/Integer)(primary_key/unique)
    floor_id = models.BigAutoField(primary_key=True)
    # floor_id = models.CharField(max_length=20 , unique=True, blank=False,)
    index = models.IntegerField()
    capacity = models.IntegerField()

    # Foreign Keys
    building_id = models.ForeignKey(Building, on_delete=models.CASCADE, null=True, )

    def __str__(self):
        return str(self.floor_id)


class Zone(models.Model):
    ### ID AutoGenerated TODO: Check the DataType for zone_id (String/Integer)/(primary_key/unique)
    zone_id = models.BigAutoField(primary_key=True)
    # zone_id = models.CharField(max_length=20 , unique=True, blank=False,)
    name = models.CharField(max_length=20, )
    code = models.CharField(max_length=20, )

    # Foreign Keys
    floor_id = models.ForeignKey(Floor, on_delete=models.CASCADE)
    type_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE)

    def __str__(self):
        return self.name + "_" + str(self.zone_id)


class Location(models.Model):
    ### ID AutoGenerated TODO: Check the DataType for location_id (String/Integer)(primary_key/unique)
    location_id = models.AutoField(primary_key=True)
    # location_id = models.CharField(max_length=20 , unique=True, blank=False,)
    row = models.IntegerField(null=True, blank=True, )
    posX = models.FloatField(null=True, blank=True, )
    posY = models.FloatField(null=True, blank=True, )

    # Foreign Keys
    zone_id = models.ForeignKey(Zone, on_delete=models.CASCADE, blank=True, null=True)

    def __str__(self):
        return str(self.location_id)


class Module(models.Model):
    ### ID AutoGenerated TODO: Check the DataType for module_id (String/Integer)(primary_key/unique)
    module_id = models.BigAutoField(primary_key=True)
    # module_id = models.CharField(max_length=20 , unique=True, blank=False,)
    name = models.CharField(max_length=20, )
    mac_addr = models.CharField(max_length=23, validators=[MinLengthValidator(23)], blank=True, unique=True)

    # Foreign Keys:
    type_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, related_name='module_type_enum')
    asset_id = models.ForeignKey(Asset, on_delete=models.CASCADE, null=True)
    location_id = models.ForeignKey(Location, on_delete=models.CASCADE, null=True)
    status_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, null=True,
                                       related_name='module_status_enum')

    def __str__(self):
        return str(self.module_id)


class Post(models.Model):
    ### ID AutoGenerated TODO: Check the DataType for post_id (String/Integer)/(primary_key/unique)
    post_id = models.CharField(primary_key=True, max_length=20)
    # post_id = models.CharField(max_length=20 , unique=True, blank=False,)
    title = models.CharField(max_length=20, )
    code = models.CharField(max_length=20, )

    def __str__(self):
        return str(self.post_id)


class Person(models.Model):
    ### ID AutoGenerated
    first_name = models.CharField(max_length=20, )
    last_name = models.CharField(max_length=20, )
    birth_date = models.IntegerField()
    nationalid = models.CharField(unique=True, blank=False, max_length=10)
    suffix = models.CharField(max_length=20, )
    # TODO : avatar configuration
    # avatar = models.ImageField()

    # Foreign keys
    asset_id = models.ForeignKey(Asset, on_delete=models.CASCADE, unique=True)
    gender_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, related_name='person_gender_enum')
    post_id = models.ForeignKey(Post, on_delete=models.CASCADE)
    prefix_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, related_name='person_prefix_enum')

    def __str__(self):
        return self.first_name + " " + self.last_name


class Stock(models.Model):
    ### ID AutoGenerated TODO: Check the DataType for stock_id (String/Integer)/(primary_key/unique)
    stock_id = models.BigAutoField(primary_key=True)
    # stock_id = models.CharField(max_length=20 , unique=True, blank=False,)
    name = models.CharField(max_length=20, )
    code = models.CharField(max_length=20, )

    # Foreign Keys
    category_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.stock_id)


class Vehicle(models.Model):
    ### ID AutoGenerated
    name = models.CharField(max_length=20, )
    brand = models.CharField(max_length=20, )
    color = models.CharField(max_length=20, )

    # Foreign Keys
    asset_id = models.ForeignKey(Asset, on_delete=models.CASCADE, unique=True)
    type_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, related_name='vehicle_type_enum')
    status_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, related_name='vehicle_status_enum')

    def __str__(self):
        return self.name + "_" + str(self.asset_id)


class Inventory(models.Model):
    ### ID AutoGenerated TODO: Check the DataType for inventory_id (String/Integer)/(primary_key/unique)
    inventory_id = models.BigAutoField(primary_key=True)
    # inventory_id = models.CharField(max_length=20 , unique=True, blank=False,)
    count = models.IntegerField()
    fromDate = models.IntegerField(blank=True, null=True, )
    tillDate = models.IntegerField(blank=True, null=True, )
    volume = models.IntegerField(blank=True, null=True, )

    # Foreign Keys
    stock_id = models.ForeignKey(Stock, on_delete=models.CASCADE, blank=True, null=True, )
    location_id = models.ForeignKey(Location, on_delete=models.CASCADE, blank=True, null=True, )

    def __str__(self):
        return str(self.inventory_id)


class Task(models.Model):
    ### ID AutoGenerated TODO: Check the DataType for task_id (String/Integer)/(primary_key/unique)
    task_id = models.BigAutoField(primary_key=True)
    # task_id = models.CharField(max_length=20 , unique=True, blank=False,)
    title = models.CharField(max_length=20, )
    description = models.CharField(max_length=20, )
    orderDate = models.IntegerField()
    deadline = models.IntegerField(blank=True, null=True, )
    data = models.CharField(max_length=100, blank=True, null=True, )

    # Foreign Keys
    category_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, related_name='task_category_enums',
                                         blank=True, null=True, )
    priority_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, related_name='task_priority_enums',
                                         blank=True, null=True, )
    status_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, related_name='task_status_enums',
                                       blank=True, null=True, )
    parent_id = models.ForeignKey('self', on_delete=models.CASCADE, blank=True, null=True)

    def __str__(self):
        return str(self.task_id)


class TaskResponsible(models.Model):
    ### ID AutoGenerated TODO: Check the DataType for task_id (String/Integer)/(primary_key/unique)
    # task_id = models.BigAutoField(primary_key=True)
    # task_id = models.CharField(max_length=20 , unique=True, blank=False,)
    fromDate = models.IntegerField(blank=True, null=True)
    tillDate = models.IntegerField(blank=True, null=True)

    # Foreign Keys
    asset_id = models.ForeignKey(Asset, on_delete=models.CASCADE, blank=True, null=True)
    task_id = models.ForeignKey(Task, on_delete=models.CASCADE, )

    def __str__(self):
        return str(self.task_id) + "_" + str(self.asset_id)


class TagPosition(models.Model):
    ### ID AutoGenerated
    timestamp = models.IntegerField()
    posX = models.FloatField(null=True, )
    posY = models.FloatField(null=True, )

    # Foreign Keys
    module_id = models.ForeignKey(Module, on_delete=models.CASCADE)
    floor_id = models.ForeignKey(Floor, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('timestamp', 'module_id',)

    def __str__(self):
        return str(self.timestamp) + "_" + str(self.module_id)


# TODO : User Attributes and Accessibility Levels Configuration

class User(models.Model):
    # TODO  : Set Up User Database and Authentication
    username = models.CharField(max_length=20, primary_key=True)
    password = models.IntegerField(default=0, null=False)
    fromDate = models.IntegerField(blank=True, null=True, )
    tillDate = models.IntegerField(blank=True, null=True, )

    # Foeriegn Keys
    asset_id = models.ForeignKey(Asset, on_delete=models.CASCADE, blank=True, null=True, )


class Travel(models.Model):
    startTimestamp = models.IntegerField()
    endTimestamp = models.IntegerField()

    asset_id = models.ForeignKey(Asset, on_delete=models.CASCADE, blank=True, null=True, )
    loadType_enum_id = models.ForeignKey(Enumeration, on_delete=models.CASCADE, blank=True, null=True,)
    fromBuilding_id = models.ForeignKey(Building, on_delete=models.CASCADE, null=True, related_name='fromBuilding_id')
    toBuilding_id = models.ForeignKey(Building, on_delete=models.CASCADE, null=True, related_name='toBuilding_id')